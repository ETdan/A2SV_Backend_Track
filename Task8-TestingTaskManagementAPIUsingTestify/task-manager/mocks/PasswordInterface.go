// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordInterface is an autogenerated mock type for the PasswordInterface type
type PasswordInterface struct {
	mock.Mock
}

// GeneratePasswordHash provides a mock function with given fields: existingUserPassword, claimPassword
func (_m *PasswordInterface) GeneratePasswordHash(existingUserPassword string, claimPassword string) ([]byte, error) {
	ret := _m.Called(existingUserPassword, claimPassword)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePasswordHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(existingUserPassword, claimPassword)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(existingUserPassword, claimPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(existingUserPassword, claimPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePasswordHash provides a mock function with given fields: existingUserPassword, claimPassword
func (_m *PasswordInterface) ValidatePasswordHash(existingUserPassword string, claimPassword string) error {
	ret := _m.Called(existingUserPassword, claimPassword)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePasswordHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(existingUserPassword, claimPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPasswordInterface creates a new instance of PasswordInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordInterface {
	mock := &PasswordInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
