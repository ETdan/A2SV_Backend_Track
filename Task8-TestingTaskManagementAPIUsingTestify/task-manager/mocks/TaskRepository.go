// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "TaskManager/task-manager/Domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: user_id, task, duration
func (_m *TaskRepository) AddTask(user_id string, task domain.Task, duration time.Duration) (string, error) {
	ret := _m.Called(user_id, task, duration)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Task, time.Duration) (string, error)); ok {
		return rf(user_id, task, duration)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Task, time.Duration) string); ok {
		r0 = rf(user_id, task, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Task, time.Duration) error); ok {
		r1 = rf(user_id, task, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskByID provides a mock function with given fields: role, user_id, task_id, time_duration
func (_m *TaskRepository) DeleteTaskByID(role string, user_id string, task_id string, time_duration time.Duration) error {
	ret := _m.Called(role, user_id, task_id, time_duration)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration) error); ok {
		r0 = rf(role, user_id, task_id, time_duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: role, user_id, duration
func (_m *TaskRepository) GetAllTasks(role string, user_id string, duration time.Duration) ([]domain.Task, error) {
	ret := _m.Called(role, user_id, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) ([]domain.Task, error)); ok {
		return rf(role, user_id, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) []domain.Task); ok {
		r0 = rf(role, user_id, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(role, user_id, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: role, user_id, task_id, duration
func (_m *TaskRepository) GetTaskByID(role string, user_id string, task_id string, duration time.Duration) (domain.Task, error) {
	ret := _m.Called(role, user_id, task_id, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration) (domain.Task, error)); ok {
		return rf(role, user_id, task_id, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration) domain.Task); ok {
		r0 = rf(role, user_id, task_id, duration)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, time.Duration) error); ok {
		r1 = rf(role, user_id, task_id, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskByID provides a mock function with given fields: role, user_id, time_duration, task, id
func (_m *TaskRepository) UpdateTaskByID(role string, user_id string, time_duration time.Duration, task domain.Task, id string) error {
	ret := _m.Called(role, user_id, time_duration, task, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, domain.Task, string) error); ok {
		r0 = rf(role, user_id, time_duration, task, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
