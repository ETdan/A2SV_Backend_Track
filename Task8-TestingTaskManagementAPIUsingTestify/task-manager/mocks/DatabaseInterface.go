// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "TaskManager/task-manager/Domain"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// DatabaseInterface is an autogenerated mock type for the DatabaseInterface type
type DatabaseInterface struct {
	mock.Mock
}
// type Collection struct{
// 	mock.Mock
// 	mc mongo.Collection
// }
// func (x *Collection)newCollection() Collection{
// 	return &Collection{
// 		mc:mongo.Collection{},
// 	}
// }

// Connect provides a mock function with given fields: database_name, user_collectionName, task_collectionName
func (_m *DatabaseInterface) Connect(database_name string, user_collectionName string, task_collectionName string) error {
	ret := _m.Called(database_name, user_collectionName, task_collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(database_name, user_collectionName, task_collectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: ctx, filter
func (_m *DatabaseInterface) DeleteTask(ctx context.Context, filter interface{}) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByCreaterID provides a mock function with given fields: user_id
func (_m *DatabaseInterface) FilterByCreaterID(user_id string) primitive.D {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for FilterByCreaterID")
	}

	var r0 primitive.D
	if rf, ok := ret.Get(0).(func(string) primitive.D); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.D)
		}
	}

	return r0
}

// FilterByUserID provides a mock function with given fields: user_id
func (_m *DatabaseInterface) FilterByUserID(user_id string) primitive.D {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for FilterByUserID")
	}

	var r0 primitive.D
	if rf, ok := ret.Get(0).(func(string) primitive.D); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.D)
		}
	}

	return r0
}

// FilterEmpty provides a mock function with given fields:
func (_m *DatabaseInterface) FilterEmpty() primitive.D {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FilterEmpty")
	}

	var r0 primitive.D
	if rf, ok := ret.Get(0).(func() primitive.D); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.D)
		}
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: filter
func (_m *DatabaseInterface) GetAllTasks(filter interface{}) (*mongo.Cursor, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*mongo.Cursor, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *mongo.Cursor); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: filter
func (_m *DatabaseInterface) GetTaskByID(filter interface{}) *mongo.SingleResult {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(interface{}) *mongo.SingleResult); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// PostTask provides a mock function with given fields: ctx, task
func (_m *DatabaseInterface) PostTask(ctx context.Context, task domain.Task) (string, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for PostTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (string, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) string); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskByID provides a mock function with given fields: _a0, filter, task
func (_m *DatabaseInterface) UpdateTaskByID(_a0 context.Context, filter interface{}, task domain.Task) (*mongo.UpdateResult, error) {
	ret := _m.Called(_a0, filter, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, domain.Task) (*mongo.UpdateResult, error)); ok {
		return rf(_a0, filter, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, domain.Task) *mongo.UpdateResult); ok {
		r0 = rf(_a0, filter, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, domain.Task) error); ok {
		r1 = rf(_a0, filter, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseInterface creates a new instance of DatabaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseInterface {
	mock := &DatabaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
